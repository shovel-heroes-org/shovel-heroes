
/**
 * Zod schemas generated from OpenAPI components
 * Auto-generated using ts-to-zod from openapi.ts
 */

// Generated by ts-to-zod
import { z } from "zod";

export const idSchema = z.string();

export const timestampSchema = z.string();

export const disasterAreaSchema = z.object({
  id: idSchema,
  name: z.string().describe("災區名稱"),
  township: z
    .string()
    .optional()
    .describe("行政區 (鄉/鎮)"),
  county: z.string().optional().describe("縣市名稱"),
  center_lat: z.number().describe("災區中心點緯度"),
  center_lng: z.number().describe("災區中心點經度"),
  bounds: z
    .object({
      north: z.number(),
      south: z.number(),
      east: z.number(),
      west: z.number(),
    })
    .optional()
    .describe(
      "災區邊界 (近似方形) 用於地圖顯示",
    ),
  grid_size: z
    .number()
    .optional()
    .describe("建議網格尺寸 (公尺)"),
  status: z
    .literal("active")
    .optional()
    .describe(
      "災區狀態 (Base44 目前觀察為 active)",
    ),
  description: z
    .string()
    .optional()
    .describe("災區描述與備註"),
  created_by_id: idSchema.optional(),
  created_by: z
    .string()
    .optional()
    .describe("建立者識別 (可能為 email)"),
  is_sample: z
    .boolean()
    .optional()
    .describe("是否為示範資料"),
  created_at: timestampSchema.optional(),
  updated_at: timestampSchema.optional(),
  created_date: timestampSchema.optional(),
  updated_date: timestampSchema.optional(),
});

export const supplyNeedSchema = z.object({
  name: z.string().describe("需求物資名稱"),
  quantity: z.number().describe("需求總數量"),
  unit: z.string().describe("數量單位"),
  received: z
    .number()
    .describe("已收到的數量")
    .default(0),
});

export const gridSchema = z.object({
  id: idSchema,
  code: z
    .string()
    .describe(
      "網格代碼 (在災區中應唯一)",
    ),
  grid_type: z
    .union([
      z.literal("mud_disposal"),
      z.literal("manpower"),
      z.literal("supply_storage"),
      z.literal("accommodation"),
      z.literal("food_area"),
    ])
    .describe(
      "網格類型 (決定使用情境)",
    ),
  disaster_area_id: idSchema,
  volunteer_needed: z
    .number()
    .describe(
      "需要志工數量 (僅 manpower 類型有意義)",
    )
    .default(0),
  volunteer_registered: z
    .number()
    .describe("已報名志工數量")
    .default(0),
  meeting_point: z
    .string()
    .optional()
    .nullable()
    .describe("集合地點描述"),
  risks_notes: z
    .string()
    .optional()
    .nullable()
    .describe("風險或安全注意事項"),
  contact_info: z
    .string()
    .optional()
    .nullable()
    .describe(
      "格主或聯絡人資訊 (手機/Line)",
    ),
  center_lat: z.number().describe("中心點緯度"),
  center_lng: z.number().describe("中心點經度"),
  bounds: z
    .object({
      north: z.number(),
      south: z.number(),
      east: z.number(),
      west: z.number(),
    })
    .describe(
      "粗略網格邊界 (地圖顯示用)",
    ),
  status: z
    .union([
      z.literal("open"),
      z.literal("planning"),
      z.literal("closed"),
      z.literal("completed"),
    ])
    .describe("網格狀態")
    .default("open"),
  supplies_needed: z
    .array(supplyNeedSchema)
    .optional()
    .describe("所需物資列表"),
  grid_manager_id: idSchema.optional(),
  completion_photo: z
    .string()
    .optional()
    .nullable()
    .describe("完工照片連結 (URL 或檔名)"),
  created_at: timestampSchema.optional(),
  updated_at: timestampSchema.optional(),
  created_date: timestampSchema.optional(),
  updated_date: timestampSchema.optional(),
  created_by_id: idSchema.optional(),
  created_by: z
    .string()
    .optional()
    .describe("建立者 (email / user ref)"),
  is_sample: z
    .boolean()
    .optional()
    .describe("是否示範資料"),
});

export const volunteerStatusSchema = z.union([
  z.literal("pending"),
  z.literal("confirmed"),
  z.literal("arrived"),
  z.literal("completed"),
  z.literal("cancelled"),
]);

export const supplyDonationSchema = z.object({
  id: idSchema,
  grid_id: idSchema,
  name: z.string().describe("捐贈物資名稱"),
  quantity: z.number().describe("捐贈數量"),
  unit: z.string().describe("單位"),
  donor_contact: z
    .string()
    .optional()
    .describe("捐贈者聯絡方式"),
  created_at: timestampSchema.optional(),
});

export const gridDiscussionSchema = z.object({
  id: idSchema,
  grid_id: idSchema,
  user_id: idSchema,
  content: z.string().describe("留言內容"),
  created_at: timestampSchema.optional(),
});

export const externalLinkSchema = z.object({
  name: z.string().describe("連結名稱"),
  url: z.string().describe("連結 URL"),
});

export const userSchema = z.object({
  id: idSchema,
  name: z
    .string()
    .optional()
    .describe("使用者顯示名稱"),
  email: z
    .string()
    .optional()
    .describe("使用者電子郵件"),
});

export const volunteerListItemSchema = z.object({
  id: idSchema,
  grid_id: idSchema,
  user_id: idSchema,
  volunteer_name: z
    .string()
    .describe(
      "志工顯示名稱 (可能從使用者或表單輸入取得)",
    ),
  volunteer_phone: z
    .string()
    .optional()
    .nullable()
    .describe(
      "志工電話號碼；若 `can_view_phone=false` 時後端可直接省略或回傳遮蔽版本",
    ),
  status: volunteerStatusSchema,
  available_time: z
    .string()
    .optional()
    .nullable()
    .describe("可服務時間文字描述"),
  skills: z
    .array(z.string())
    .optional()
    .describe("自述技能 (字串列表)"),
  equipment: z
    .array(z.string())
    .optional()
    .describe("可攜帶工具 (字串列表)"),
  notes: z.string().optional().nullable().describe("其他備註"),
  created_date: z
    .string()
    .describe(
      "報名建立時間 (命名沿用前端使用字段; 與其他資源的 created_at 不同)",
    ),
});

export const volunteersListResponseSchema = z.object({
  data: z
    .array(volunteerListItemSchema)
    .describe("志工報名資料陣列"),
  can_view_phone: z
    .boolean()
    .describe(
      "是否允許前端顯示 `volunteer_phone`；由後端依角色授權判斷",
    ),
  total: z
    .number()
    .optional()
    .describe("總筆數 (分頁時可用)"),
  status_counts: z
    .object({
      pending: z.number().optional(),
      confirmed: z.number().optional(),
      arrived: z.number().optional(),
      completed: z.number().optional(),
      cancelled: z.number().optional(),
    })
    .optional()
    .describe(
      "各狀態統計 (若 `include_counts=true` 或後端預設回傳)",
    ),
  page: z
    .number()
    .optional()
    .describe(
      "目前頁碼 (可選, 若採用 page 模式)",
    ),
  limit: z
    .number()
    .optional()
    .describe(
      "單頁筆數 (對應查詢參數)",
    ),
});

export const errorSchema = z.object({
  message: z.string().describe("錯誤訊息"),
  code: z
    .string()
    .optional()
    .describe("內部錯誤代碼 (可選)"),
});

export const volunteerRegistrationSchema = z.object({
  id: idSchema,
  grid_id: idSchema,
  volunteer_name: z.string().describe("報名者名稱"),
  volunteer_phone: z
    .string()
    .optional()
    .nullable()
    .describe(
      "電話 (可能缺省或僅內部可見)",
    ),
  volunteer_email: z
    .string()
    .optional()
    .nullable()
    .describe("電子郵件"),
  available_time: z
    .string()
    .optional()
    .nullable()
    .describe("可服務時間文字"),
  skills: z.array(z.string()).optional().describe("技能列表"),
  equipment: z
    .array(z.string())
    .optional()
    .describe("攜帶工具"),
  status: volunteerStatusSchema,
  check_in_time: z
    .string()
    .optional()
    .nullable()
    .describe("報到時間 (若已報到)"),
  notes: z.string().optional().nullable().describe("備註"),
  created_by_id: idSchema.optional(),
  created_by: z.string().optional().describe("建立者 (email)"),
  is_sample: z
    .boolean()
    .optional()
    .describe("是否示範資料"),
  created_date: timestampSchema.optional(),
  updated_date: timestampSchema.optional(),
  created_at: timestampSchema.optional(),
  updated_at: timestampSchema.optional(),
});

export const announcementSchema = z.object({
  id: idSchema,
  title: z.string().describe("公告標題"),
  body: z
    .string()
    .describe(
      "公告內容 (舊命名, 將逐步改為 content)",
    ),
  content: z
    .string()
    .optional()
    .describe(
      "公告內容 (實際資料欄位)",
    ),
  category: z
    .union([
      z.literal("safety"),
      z.literal("equipment"),
      z.literal("center"),
      z.literal("external"),
      z.literal("contact"),
    ])
    .optional()
    .describe("公告分類"),
  is_pinned: z.boolean().optional().describe("是否置頂"),
  external_links: z
    .array(externalLinkSchema)
    .optional()
    .describe("外部參考連結"),
  contact_phone: z
    .string()
    .optional()
    .nullable()
    .describe(
      "聯絡電話 (可含多組 / 分隔)",
    ),
  order: z
    .number()
    .optional()
    .describe(
      "排序用權重 (數字越小越前)",
    ),
  created_by_id: idSchema.optional(),
  created_by: z.string().optional().describe("建立者 (email)"),
  is_sample: z
    .boolean()
    .optional()
    .describe("是否示範資料"),
  created_at: timestampSchema.optional(),
  created_date: timestampSchema.optional(),
  updated_date: timestampSchema.optional(),
});

