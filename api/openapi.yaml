openapi: 3.1.0
info:
  title: Shovel Heroes API
  version: 0.2.0
  description: |
    Current implementation spec for Shovel Heroes backend.
    This document reflects the actually implemented routes (LINE OAuth, grids, disaster areas,
    volunteer registrations, volunteers aggregate view, supply donations, announcements, grid discussions, users).
    Deprecated / planned endpoints from earlier drafts (tasks, checkins, resource-points) removed to avoid confusion.
  contact:
    name: Maintainers
    email: shovel-heroes@noreply.github.com
servers:
  - url: https://api.shovel-heroes.example.org
    description: Production (placeholder)
  - url: https://staging.api.shovel-heroes.example.org
    description: Staging (placeholder)

tags:
  - name: Auth
    description: Authentication & LINE OAuth
  - name: Users
    description: User & identity endpoints
  - name: DisasterAreas
    description: Disaster area management
  - name: Grids
    description: Grid (需求) management
  - name: VolunteerRegistrations
    description: Volunteer registration records (per grid)
  - name: Volunteers
    description: Aggregated volunteer listing & stats
  - name: SupplyDonations
    description: Supply donation records
  - name: Announcements
    description: System / public announcements
  - name: GridDiscussions
    description: Comments / discussions under grids

paths:
  /auth/line/login:
    get:
      tags: [Auth]
      summary: LINE OAuth start (redirect)
      description: Redirects user agent to LINE authorization page.
      responses:
        '302':
          description: Redirect to LINE authorization URL
  /auth/line/callback:
    get:
      tags: [Auth]
      summary: LINE OAuth callback (redirect to frontend)
      parameters:
        - in: query
          name: code
          schema: { type: string }
        - in: query
          name: state
          schema: { type: string }
        - in: query
          name: error
          schema: { type: string }
      responses:
        '302':
          description: Redirect to frontend /auth/line/return with code & state or error
  /auth/line/exchange:
    post:
      tags: [Auth]
      summary: Exchange LINE code/state for app JWT
      description: Validates state, exchanges code with LINE, creates/updates user, issues short-lived JWT (2h).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [code, state]
              properties:
                code: { type: string }
                state: { type: string }
      responses:
        '200':
          description: JWT issued
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthTokenResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '502': { $ref: '#/components/responses/UpstreamError' }
        '500': { $ref: '#/components/responses/ServerError' }
  /auth/logout:
    get:
      tags: [Auth]
      summary: Logical logout
      description: Stateless JWT – client discards token.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: ok }

  /users:
    get:
      tags: [Users]
      summary: List users
      responses:
        '200':
          description: User list
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/User' }
  /me:
    get:
      tags: [Users]
      summary: Current user profile
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Authenticated user
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '401': { $ref: '#/components/responses/Unauthorized' }

  /disaster-areas:
    get:
      tags: [DisasterAreas]
      summary: List disaster areas
      responses:
        '200':
          description: List
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/DisasterArea' }
    post:
      tags: [DisasterAreas]
      summary: Create disaster area
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/DisasterAreaCreate' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/DisasterArea' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
  /disaster-areas/{id}:
    get:
      tags: [DisasterAreas]
      summary: Get disaster area
      parameters:
        - $ref: '#/components/parameters/IdPath'
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/DisasterArea' } } } }
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      tags: [DisasterAreas]
      summary: Update disaster area
      parameters:
        - $ref: '#/components/parameters/IdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/DisasterAreaUpdate' }
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/DisasterArea' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
    delete:
      tags: [DisasterAreas]
      summary: Delete disaster area
      parameters:
        - $ref: '#/components/parameters/IdPath'
      responses:
        '204': { description: Deleted }
        '404': { $ref: '#/components/responses/NotFound' }

  /grids:
    get:
      tags: [Grids]
      summary: List grids
      description: Returns grids ordered by created_at DESC.
      responses:
        '200':
          description: List of grids
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Grid' }
    post:
      tags: [Grids]
      summary: Create grid
      description: Optional Turnstile token included when TURNSTILE_SECRET_KEY set.
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/GridCreate' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Grid' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
  /grids/{id}:
    get:
      tags: [Grids]
      summary: Get grid
      parameters: [ { $ref: '#/components/parameters/IdPath' } ]
      responses:
        '200': { description: OK, content: { application/json: { schema: { $ref: '#/components/schemas/Grid' } } } }
        '404': { $ref: '#/components/responses/NotFound' }
    put:
      tags: [Grids]
      summary: Update grid
      security: [{ bearerAuth: [] }]
      parameters: [ { $ref: '#/components/parameters/IdPath' } ]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/GridUpdate' }
      parameters:
        - $ref: '#/components/parameters/IdPath'
        - $ref: '#/components/parameters/ActingRoleHeader'
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/Grid' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    delete:
      tags: [Grids]
      summary: Delete grid
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/IdPath'
        - $ref: '#/components/parameters/ActingRoleHeader'
      responses:
        '204': { description: Deleted }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '409': { description: Has related records, content: { application/json: { schema: { $ref: '#/components/schemas/GridDependencyConflict' } } } }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /volunteer-registrations:
    get:
      tags: [VolunteerRegistrations]
      summary: List volunteer registrations
      parameters:
        - in: query
          name: grid_id
          schema: { type: string }
          description: Filter by grid id
      responses:
        '200': { description: List, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/VolunteerRegistration' } } } } }
    post:
      tags: [VolunteerRegistrations]
      summary: Create volunteer registration
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/VolunteerRegistrationCreate' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/VolunteerRegistration' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
  /volunteer-registrations/{id}:
    put:
      tags: [VolunteerRegistrations]
      summary: Update registration status
      security: [{ bearerAuth: [] }]
      parameters:
        - $ref: '#/components/parameters/IdPath'
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/VolunteerRegistrationStatusUpdate' }
      responses:
        '200': { description: Updated, content: { application/json: { schema: { $ref: '#/components/schemas/VolunteerRegistration' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }
        '403': { $ref: '#/components/responses/Forbidden' }
        '404': { $ref: '#/components/responses/NotFound' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }
    delete:
      tags: [VolunteerRegistrations]
      summary: Delete registration
      parameters: [ { $ref: '#/components/parameters/IdPath' } ]
      responses:
        '204': { description: Deleted }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /volunteers:
    get:
      tags: [Volunteers]
      summary: Aggregated volunteers list
      parameters:
        - in: query
          name: grid_id
          schema: { type: string }
        - in: query
          name: status
          schema: { $ref: '#/components/schemas/VolunteerRegistrationStatus' }
        - in: query
          name: limit
          schema: { type: integer, default: 200, minimum: 1, maximum: 500 }
        - in: query
          name: offset
          schema: { type: integer, default: 0, minimum: 0 }
        - in: query
          name: include_counts
          schema: { type: string, enum: ['true','false'], default: 'true' }
      responses:
        '200':
          description: Aggregated list & counts
          content:
            application/json:
              schema: { $ref: '#/components/schemas/VolunteersAggregateResponse' }

  /supply-donations:
    get:
      tags: [SupplyDonations]
      summary: List supply donations
      parameters:
        - in: query
          name: grid_id
          schema: { type: string }
      responses:
        '200': { description: List, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/SupplyDonation' } } } } }
    post:
      tags: [SupplyDonations]
      summary: Create supply donation
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SupplyDonationCreate' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/SupplyDonation' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '503': { $ref: '#/components/responses/ServiceUnavailable' }

  /announcements:
    get:
      tags: [Announcements]
      summary: List announcements
      responses:
        '200': { description: List, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/Announcement' } } } } }
    post:
      tags: [Announcements]
      summary: Create announcement
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AnnouncementCreate' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/Announcement' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }

  /grid-discussions:
    get:
      tags: [GridDiscussions]
      summary: List grid discussions
      parameters:
        - in: query
          name: grid_id
          schema: { type: string }
          description: Filter by grid id
      responses:
        '200': { description: List, content: { application/json: { schema: { type: array, items: { $ref: '#/components/schemas/GridDiscussion' } } } } }
    post:
      tags: [GridDiscussions]
      summary: Create grid discussion message
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/GridDiscussionCreate' }
      responses:
        '201': { description: Created, content: { application/json: { schema: { $ref: '#/components/schemas/GridDiscussion' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '401': { $ref: '#/components/responses/Unauthorized' }

components:
  parameters:
    IdPath:
      name: id
      in: path
      required: true
      schema: { type: string }
    ActingRoleHeader:
      name: X-Acting-Role
      in: header
      required: false
      description: "Optional acting perspective. Only value currently used is 'user'; omitted means real role (e.g. admin)."
      schema:
        type: string
        enum: ['user']

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        Custom HS256 JWT issued by /auth/line/exchange. Short-lived (2h). No refresh yet. Include as `Authorization: Bearer <token>`.

  responses:
    BadRequest:
      description: Invalid request parameters or body
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    Unauthorized:
      description: Authentication required or invalid token
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    Forbidden:
      description: Operation not permitted (role / ownership / actingRole restriction)
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    ServiceUnavailable:
      description: Backend dependency (DB) not ready
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    UpstreamError:
      description: Upstream provider failure (e.g., LINE token exchange)
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

  schemas:
    User:
      type: object
      properties:
        id: { type: string }
        name: { type: string, nullable: true }
        email: { type: string, nullable: true }
        avatar_url: { type: string, nullable: true }
        role: { type: string, nullable: true, description: "user | grid_manager | admin" }

    DisasterArea:
      type: object
      properties:
        id: { type: string }
        name: { type: string }
        township: { type: string, nullable: true }
        county: { type: string, nullable: true }
        center_lat: { type: number }
        center_lng: { type: number }
        bounds: { $ref: '#/components/schemas/Bounds', nullable: true }
        grid_size: { type: integer, nullable: true }
        status: { type: string, nullable: true }
        description: { type: string, nullable: true }
        created_at: { type: string, format: date-time, nullable: true }
        updated_at: { type: string, format: date-time, nullable: true }
    DisasterAreaCreate:
      allOf:
        - $ref: '#/components/schemas/DisasterArea'
      required: [name, center_lat, center_lng]
    DisasterAreaUpdate:
      type: object
      description: Partial update
      properties:
        name: { type: string }
        township: { type: string }
        county: { type: string }
        center_lat: { type: number }
        center_lng: { type: number }
        bounds: { $ref: '#/components/schemas/Bounds' }
        grid_size: { type: integer }
        status: { type: string }
        description: { type: string }

    Bounds:
      type: object
      properties:
        north: { type: number }
        south: { type: number }
        east: { type: number }
        west: { type: number }
      required: [north, south, east, west]

    SupplyNeed:
      type: object
      properties:
        name: { type: string }
        quantity: { type: number }
        unit: { type: string }
        received: { type: number, nullable: true }

    Grid:
      type: object
      properties:
        id: { type: string }
        code: { type: string }
        grid_type: { type: string }
        disaster_area_id: { type: string }
        volunteer_needed: { type: integer, nullable: true }
        volunteer_registered: { type: integer, nullable: true }
        meeting_point: { type: string, nullable: true }
        risks_notes: { type: string, nullable: true }
        contact_info: { type: string, nullable: true }
        center_lat: { type: number }
        center_lng: { type: number }
        bounds: { $ref: '#/components/schemas/Bounds', nullable: true }
        status: { type: string, description: "open | completed | preparing (others may appear)" }
        supplies_needed: { type: array, items: { $ref: '#/components/schemas/SupplyNeed' }, nullable: true }
        grid_manager_id: { type: string, nullable: true }
        completion_photo: { type: string, nullable: true }
        created_by_id: { type: string, nullable: true }
        created_by: { type: string, nullable: true }
        is_sample: { type: boolean, nullable: true }
        created_at: { type: string, format: date-time, nullable: true }
        updated_at: { type: string, format: date-time, nullable: true }
    GridCreate:
      type: object
      required: [code, grid_type, disaster_area_id, center_lat, center_lng]
      properties:
        code: { type: string }
        grid_type: { type: string }
        disaster_area_id: { type: string }
        volunteer_needed: { type: integer, nullable: true }
        meeting_point: { type: string, nullable: true }
        risks_notes: { type: string, nullable: true }
        contact_info: { type: string, nullable: true }
        center_lat: { type: number }
        center_lng: { type: number }
        bounds: { $ref: '#/components/schemas/Bounds' }
        status: { type: string, nullable: true }
        supplies_needed: { type: array, items: { $ref: '#/components/schemas/SupplyNeed' }, nullable: true }
        grid_manager_id: { type: string, nullable: true }
        completion_photo: { type: string, nullable: true }
        __turnstile_token: { type: string, nullable: true, description: "Cloudflare Turnstile token (optional / env dependent)" }
    GridUpdate:
      type: object
      description: Partial update; any GridCreate field optional.
      properties:
        code: { type: string }
        grid_type: { type: string }
        volunteer_needed: { type: integer }
        meeting_point: { type: string }
        risks_notes: { type: string }
        contact_info: { type: string }
        bounds: { $ref: '#/components/schemas/Bounds' }
        status: { type: string }
        supplies_needed: { type: array, items: { $ref: '#/components/schemas/SupplyNeed' } }
        grid_manager_id: { type: string }
        completion_photo: { type: string }

    GridDependencyConflict:
      type: object
      properties:
        message: { type: string, example: Grid has related records }
        details:
          type: object
          properties:
            vr_count: { type: string, description: "Volunteer registrations count (string from SQL)" }
            sd_count: { type: string }
            gd_count: { type: string }

    VolunteerRegistrationStatus:
      type: string
      enum: [pending, confirmed, arrived, completed, declined, cancelled]
      description: "Lifecycle: pending -> confirmed -> arrived -> completed; branches: declined, cancelled (terminal)."

    VolunteerRegistration:
      type: object
      properties:
        id: { type: string }
        grid_id: { type: string }
        user_id: { type: string, nullable: true }
        volunteer_name: { type: string, nullable: true }
        volunteer_phone: { type: string, nullable: true }
        volunteer_email: { type: string, nullable: true }
        available_time: { type: string, nullable: true }
        skills: { type: array, items: { type: string }, nullable: true }
        equipment: { type: array, items: { type: string }, nullable: true }
        status: { $ref: '#/components/schemas/VolunteerRegistrationStatus' }
        notes: { type: string, nullable: true }
        created_at: { type: string, format: date-time, nullable: true }
        updated_at: { type: string, format: date-time, nullable: true }
    VolunteerRegistrationCreate:
      type: object
      required: [grid_id]
      properties:
        grid_id: { type: string }
        user_id: { type: string }
        volunteer_name: { type: string }
        volunteer_phone: { type: string }
        volunteer_email: { type: string }
        available_time: { type: string }
        skills: { type: array, items: { type: string } }
        equipment: { type: array, items: { type: string } }
        status: { $ref: '#/components/schemas/VolunteerRegistrationStatus' }
        notes: { type: string }
      description: Either user_id or volunteer_name must be provided (server validation rule).
    VolunteerRegistrationStatusUpdate:
      type: object
      required: [status]
      properties:
        status: { $ref: '#/components/schemas/VolunteerRegistrationStatus' }
      x-status-transitions:
        description: Allowed transitions enforced server-side.
        transitions:
          pending: [confirmed, declined, cancelled]
          confirmed: [arrived, cancelled]
          arrived: [completed, cancelled]
          completed: []
          declined: []
          cancelled: []

    VolunteersAggregateItem:
      type: object
      properties:
        id: { type: string }
        grid_id: { type: string }
        user_id: { type: string, nullable: true }
        volunteer_name: { type: string }
        volunteer_phone: { type: string, nullable: true }
        status: { $ref: '#/components/schemas/VolunteerRegistrationStatus' }
        available_time: { type: string, nullable: true }
        skills: { type: array, items: { type: string } }
        equipment: { type: array, items: { type: string } }
        notes: { type: string, nullable: true }
        created_date: { type: string, nullable: true }
    VolunteersAggregateResponse:
      type: object
      properties:
        data: { type: array, items: { $ref: '#/components/schemas/VolunteersAggregateItem' } }
        can_view_phone: { type: boolean }
        total: { type: integer }
        status_counts:
          type: object
          additionalProperties: { type: integer }
          nullable: true
        limit: { type: integer }
        page: { type: integer }

    SupplyDonation:
      type: object
      properties:
        id: { type: string }
        grid_id: { type: string }
        name: { type: string, nullable: true }
        quantity: { type: number }
        unit: { type: string, nullable: true }
        donor_contact: { type: string, nullable: true }
        created_at: { type: string, format: date-time, nullable: true }
    SupplyDonationCreate:
      type: object
      required: [grid_id, quantity]
      properties:
        grid_id: { type: string }
        name: { type: string }
        supply_name: { type: string }
        quantity: { type: number }
        unit: { type: string }
        donor_name: { type: string }
        donor_phone: { type: string }
        donor_email: { type: string }
        donor_contact: { type: string }
        delivery_method: { type: string }
        delivery_address: { type: string }
        delivery_time: { type: string }
        notes: { type: string }
      description: Only subset persisted: name, quantity, unit, donor_contact.

    Announcement:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        body: { type: string }
        content: { type: string, nullable: true }
        category: { type: string, nullable: true }
        is_pinned: { type: boolean, nullable: true }
        external_links: { type: array, items: { type: object, properties: { name: { type: string }, url: { type: string } } }, nullable: true }
        contact_phone: { type: string, nullable: true }
        order: { type: integer, nullable: true }
        created_at: { type: string, format: date-time, nullable: true }
    AnnouncementCreate:
      type: object
      required: [title, body]
      properties:
        title: { type: string }
        body: { type: string }
        content: { type: string }
        category: { type: string }
        is_pinned: { type: boolean }
        external_links: { type: array, items: { type: object, properties: { name: { type: string }, url: { type: string } } } }
        contact_phone: { type: string }
        order: { type: integer }

    GridDiscussion:
      type: object
      properties:
        id: { type: string }
        grid_id: { type: string }
        user_id: { type: string, nullable: true }
        content: { type: string }
        author_name: { type: string, nullable: true }
        author_role: { type: string, nullable: true }
        created_at: { type: string, format: date-time, nullable: true }
    GridDiscussionCreate:
      type: object
      required: [grid_id]
      properties:
        grid_id: { type: string }
        content: { type: string }
        message: { type: string }
      description: Either content or message required.

    AuthTokenResponse:
      type: object
      properties:
        token: { type: string, description: "JWT (HS256)" }
        user: { $ref: '#/components/schemas/User' }

    Error:
      type: object
      properties:
        message: { type: string }
        code: { type: string, nullable: true }
        details: { type: object, nullable: true }
      required: [message]

x-guidelines:
  actingRole:
    description: "X-Acting-Role header narrows privileges (e.g. admin acting as 'user'). Currently applied to /grids PUT/DELETE."
  security:
    jwt: "Custom HS256 short-lived token. Consider future refresh rotation + JWKS for LINE id_token verification."
  volunteerRegistrationLifecycle:
    states: [pending, confirmed, arrived, completed, declined, cancelled]
    transitions:
      pending: [confirmed, declined, cancelled]
      confirmed: [arrived, cancelled]
      arrived: [completed, cancelled]
      declined: []
      completed: []
      cancelled: []
  gridDeletion:
    conflict: "DELETE /grids/{id} returns 409 if related volunteer_registrations, supply_donations, or grid_discussions exist."

